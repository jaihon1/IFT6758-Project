# To build a container, you will use the docker build command
# https://docs.docker.com/engine/reference/commandline/build/
#
#   docker build -t <IMAGE TAG> -f Dockerfile.serving .
#   docker build -t <IMAGE TAG> -f Dockerfile.jupyter .
#


# https://docs.docker.com/engine/reference/builder/#from
# You shouldn't need to change this
FROM python:3.7

# https://docs.docker.com/engine/reference/builder/#workdir
# Create and cd into /code as your working directory
WORKDIR /code


COPY /ift6758/requirements.txt /code/requirements.txt


# The main docker commands you will find useful:
#
# Add a file or directory
# https://docs.docker.com/engine/reference/builder/#add
#
#       ADD ./<SOURCE_DIR/FILE> ./<DOCKER_DIR/FILE>
#
# Run a shell command (tip: chain shell commands with && rather than multiple RUN commands)
# https://docs.docker.com/engine/reference/builder/#run
#
#       RUN <SHELL COMMAND>
#
# Set an environment variable:
# https://docs.docker.com/engine/reference/builder/#env
#
#       ENV <ENV_VAR>=<DEFAULT>
#
# Expose a port
# https://docs.docker.com/engine/reference/builder/#port
#
#       EXPOSE <PORT>
#
# Provide default command for executing container
# https://docs.docker.com/engine/reference/builder/#cmd
#
#       CMD <SHELL COMMAND>



# TODO: add code, optionally a default model if you want


# TODO: install libs
RUN pip install -r requirements.txt

COPY . .

# TODO: expose ports (or do this in docker-compose)
ENV PORT 5000

EXPOSE 5000
# TODO: specify default command - this is not required because you can always specify the command
# either with the docker run command or in the docker-compose file

# docker build -t ift6758/serving:1.0.0 -f Dockerfile.serving .
# docker run -it -p 127.0.0.1:5000:5000/tcp --env COMET_API_KEY="ZqM4liL9boT3pGhQWAP5Bj1xD" -d ift6758/serving:1.0.0
# docker exec -it 08e5e11c1170 bash